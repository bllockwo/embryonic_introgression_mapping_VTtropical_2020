// Keywords: recombination rate map, recombination map

initialize() {
//META
//DATA

	meta = readCSV(META, 
c("chr", "level", "start",  "end", "Lenght", "rate_rho"),
 sep="\t");
foldername = paste(meta.getValue("chr"),meta.getValue("start"),meta.getValue("end"),"drift", sep = "_" );

defineGlobal("foldername", foldername);
defineGlobal("MYPATH", "/gpfs2/scratch/jcnunez/fst_brent/simulations/output");

	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, meta.getValue("Lenght"));
	initializeRecombinationRate(meta.getValue("rate_rho"));
	//defineConstant("ith", 1);
   m1.convertToSubstitution = F;

}
1 early() { 
sim.addSubpop("p1", 1500);}
1 late() {
//import data
dataF = readCSV(DATA, 
c("chr", "real_pos", "AF", "AFparent",  "slim_pos"),
 sep="\t");
f1sL = length(dataF.getValue("slim_pos"));
//add mutations
for(i in 0:(f1sL-1)){
//catn(asInteger(round(dataF.getValue("AF")[i]*1500*2)));
target = sample(p1.genomes,  asInteger(round(dataF.getValue("AF")[i]*1500*2)) );
target.addNewDrawnMutation(m1, asInteger(dataF.getValue("slim_pos")[i]-1) );
}
}
2:16 early() {
if (sim.cycle % 2 == 0 | sim.cycle == 1) {
cat(sim.cycle + "even" + "\n");
p1.setSubpopulationSize(300);
}
if (sim.cycle % 2 != 0 | sim.cycle == 1) {
cat(sim.cycle + "odd" + "\n");
p1.setSubpopulationSize(1500);
}

}
17 first() {
allmuts = sim.mutations;
meta = readCSV(META, 
c("chr", "level", "start",  "end", "Lenght", "rate_rho"),
 sep="\t");

for(mut in allmuts){
pos = mut.position+1;
fp = sim.mutationFrequencies(p1, mut);
reporter =  pos + "," + fp + "," + meta.getValue("chr") + "," + ith + "," +
meta.getValue("level") + "," +
meta.getValue("start") + "," +
meta.getValue("end") + "," +
meta.getValue("rate_rho");
filename = paste(meta.getValue("chr"),meta.getValue("start"),meta.getValue("end"),"drift",ith, sep = "_" );
writeFile(paste(c(MYPATH, "/", foldername, "/" ,filename,".","txt"), sep = ""), reporter, append = T);
}

}
17 late() { sim.simulationFinished(); }
