// Keywords: recombination rate map, recombination map

initialize() {
///FOR DEBUGGING ONLY
//defineGlobal("DATA", "/gpfs2/scratch/jcnunez/fst_brent/simulations/win_data/2L_10500001_10592811.data.txt");
//defineGlobal("META","/gpfs2/scratch/jcnunez/fst_brent/simulations/win_meta/2L_10500001_10592811.meta.txt");
//// CLOSE DEBUGGING

/// metadata in
meta = readCSV(META, 
c("chr", "level", "start",  "end", "Lenght", "rate_rho"),
 sep="\t");

	initializeSLiMModelType("nonWF");
	defineConstant("K", 1500);

	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, meta.getValue("Lenght"));
	initializeRecombinationRate(meta.getValue("rate_rho"));
	//defineConstant("ith", 1);
   m1.convertToSubstitution = F;


//user defined data data
foldername = paste(meta.getValue("chr"),meta.getValue("start"),meta.getValue("end"),"nonWFintro", sep = "_" );
defineGlobal("foldername", foldername);
defineGlobal("MYPATH", "/gpfs2/scratch/jcnunez/fst_brent/simulations/nonWFintro_output");
}

/// basic non-wf reproduction model
reproduction() {
	subpop.addCrossed(individual, subpop.sampleIndividuals(1));
}
//// First generation events
//// create two populations (i.e., bottles) of 1500 individuals (diploid)
1 early() { 
sim.addSubpop("p1", 1500);
sim.addSubpop("p2", 1500);
}
/// carry capacity evaluation --- evaluated as a general "early event"
early() {
	p1.fitnessScaling = K / p1.individualCount;
	p2.fitnessScaling = K / p2.individualCount;
}

1 late() {
//import data
dataF = readCSV(DATA, 
c("chr", "real_pos", "AF", "AFparent",  "slim_pos"),
 sep="\t");
f1sL = length(dataF.getValue("slim_pos"));
//add mutations
for(i in 0:(f1sL-1)){
//catn(asInteger(round(dataF.getValue("AF")[i]*1500*2)));
target = sample(p1.genomes,  asInteger(round(dataF.getValue("AF")[i]*1500*2)) );
target.addNewDrawnMutation(m1, asInteger(dataF.getValue("slim_pos")[i]-1) );

parent = sample(p2.genomes,  asInteger(round(dataF.getValue("AFparent")[i]*1500*2)) );
parent.addNewDrawnMutation(m1, asInteger(dataF.getValue("slim_pos")[i]-1) );
}
}

///// Active generations --- this happens as a frist callback
2:16 first() {

///// what happens at even generations
if (sim.cycle % 2 == 0 | sim.cycle == 1) {
cat(sim.cycle + "even" + "\n");

// First we select 80% of p1 to die at random...
// this operated under a random chance model where 80% of p1 is chosed to die at random.
chosentodie = sample(p1.individuals,  asInteger(round(length(p1.individuals)*0.8)) );
sim.killIndividuals(chosentodie);
catn(length(p1.individuals), "survivors -- after choosen to die");

//perform introgression movement
chosentointrogress = sample(p2.individuals, 300);
p1.takeMigrants(chosentointrogress);
catn(length(p1.individuals), "after take migrants");
}

///// what happens at odds generations
if (sim.cycle % 2 != 0 | sim.cycle == 1) {
cat(sim.cycle + "odd" + "\n");

catn("apply only drift");

}
}

///// Last generation -- save output
17 first() {
allmuts = sim.mutations;
meta = readCSV(META, 
c("chr", "level", "start",  "end", "Lenght", "rate_rho"),
 sep="\t");

for(mut in allmuts){
pos = mut.position+1;
fp = sim.mutationFrequencies(p1, mut);
reporter =  pos + "," + fp + "," + meta.getValue("chr") + "," + ith + "," +
meta.getValue("level") + "," +
meta.getValue("start") + "," +
meta.getValue("end") + "," +
meta.getValue("rate_rho");
filename = paste(meta.getValue("chr"),meta.getValue("start"),meta.getValue("end"),"drift",ith, sep = "_" );
writeFile(paste(c(MYPATH, "/", foldername, "/" ,filename,".","txt"), sep = ""), reporter, append = T);
}

}
17 late() { sim.simulationFinished(); }
